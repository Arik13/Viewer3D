FULL GRAPHICS PIPELINE
    √ Generate Polygons
    √ Project Polygons to a projection plane
    √ Generate pixel points on projection plane in a 2D array of vectors, one for every pixel
        ** Switch from recursive algorithm to incremental
    √ Map projection plane (and its polygons) to screen space
    Create Raster corresponding to screen pixels
    Access each screen space polygon
    Use triple edge bounding algorithm to get points bounded by polygon
    Ask polygon for min vertex distance
    For each point in each polygon
        Get intersection point of bounded point with original polygon
        Get distance between camera and intersection point
        If distance is is less than the stored distance at the current index
            Get the color at the intersection point from the polygon            
            Store color in raster
    Draw the raster

CURRENT GRAPHICS PIPELINE

World space
Get set of polygons, give to camera
Camera maps all polygons to projection plane
projection plane is rotated to align perpendicular to z-axis
rotate projection plane is adjusted to screen space (translation)
camera passes polygons to controller which passes them to the drawer
the drawer converts the polygons to 2D polygons, which are then filled
